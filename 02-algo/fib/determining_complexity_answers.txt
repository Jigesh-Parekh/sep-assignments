def goodbye_world(n)
 puts "Goodbye World! #{n}"
end

constant time, O(1) program takes teh same amount of time to execute regardless of the size of n

def find_largest(collection)
 largest = collection[0]
 collection.length.times do |i|
   if collection[i] >= largest
     largest = collection[i]
   end
 end
 largest
end

linear time O(n) application takes as long as time as the size of collection (size of n) since it is an iterative operation that has to parse the size of collection to find n

def find_largest(collection)
 largest = collection[0][0]
 collection.length.times do |i|
   subcollection = collection[i]
   subcollection.length.times do |i|
     if subcollection[i] >= largest
       largest = subcollection[i]
     end
   end
 end
 largest

 linear time O(n) application takes as long as time as the size of collection (size of n) since it is an iterative operation that has to parse the size of collection and subcollection to find n

 def numbers(n)
 if (n == 0)
   return 0
 elsif (n == 1)
   return 1
 else
   return numbers(n-1) + numbers(n-2)
 end
end

5 7 11 ...

because this application runs recursivley that causes itself to grow exponentially, because it has to call itself 2 times as the end cases are not met the application is runnint O(n^2)

def iterative(n)
 num1 = 0
 num2 = 1

 i = 0
 while i < n-1
   tmp = num1 + num2
   num1 = num2
   num2 = tmp
   i+=1
 end

 num2
end

3

application runs O(n) because the app is dependant on the size of N the application continues until it hits its end case which is i growing to the point past n-1 which is dependant on the input n- linear time

def sort(collection, from=0, to=nil)
 if to == nil
   # Sort the whole collection, by default
   to = collection.count - 1
 end

 if from >= to
   # Done sorting
   return
 end

 # Take a pivot value, at the far left
 pivot = collection[from]

 # Min and Max pointers
 min = from
 max = to

 # Current free slot
 free = min

 while min < max
   if free == min # Evaluate collection[max]
     if collection[max] <= pivot # Smaller than pivot, must move
       collection[free] = collection[max]
       min += 1
       free = max
     else
       max -= 1
     end
   elsif free == max # Evaluate collection[min]
     if collection[min] >= pivot # Bigger than pivot, must move
       collection[free] = collection[min]
       max -= 1
       free = min
     else
       min += 1
     end
   else
     raise "Inconsistent state"
   end
 end

 collection[free] = pivot

 sort collection, from, free - 1
 sort collection, free + 1, to

 collection
end

Quicksort witch is dependant on the size of the collection worst case O(n^2). this so because The while loop is O(n), and recursive calls only reduce the size of n by 1 in worst case. Each recursive call adds C(n + (n-1) + (n-2) + ...). this can be simplifies down to c((n+1)(n/2)âˆ’1) which is simplified when removing constants to O(n^2)